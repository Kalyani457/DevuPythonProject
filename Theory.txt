identifiers
    identifier is a name used to identify varibale, function, class,module or any other object. The identifiers starts with letter (A-Z) or (a-z) or an _ (underscore) and digits.
    Python doesn't allow any punctuations except for underscore's.
    Python is case sensitive.
    Class names will be starting with upper case letters. rest all will be starting with lower case letters.


Reserved words - These cannot be used as a constant or a variable.
    and
    assert
    break
    *class
    continue
    *def
    del
    *elif
    *else
    *except
    exec
    *finally
    *for
    from
    global
    *if
    import
    in
    is
    lambda
    not
    or
    pass
    print
    raise
    return
    *try
    *while
    *with
    yield
* all of these having blocks of expressions (indentation) ending with colon(:)

Comments:
    single line comments: are visible to programmers which are invisible to inerpreters.
        single line comments begins with #
    Multi Line comments: begins with ''' and ends with '''. If we start the line with ''' and then we write multiple lines of data and ended with ''', we will get the output in single line.

python -h (we will get the important options and arguments (and corresponding environment variables)) which are belo list:
    -c cmd prgm passed in as string
    -d opens python in debug mode
    Above two (-c & -d) both are used in python testing and python expertise.
    -v Verbose means lot of things happened in background.
    -V goes for version
python -v - while downloading python we click the checkbox add python to path, this is installing interpreter. interpreter reads and executes the code by reading .py files.
Translator sits between code & Operating System in byte code.
Translator comes with 2 types 1. compilers & 2. Interpreters.
While importing program, pycache files will be created.
    (terminal window>>> python (Enter) >> we can see pycache->prgm name.cpython->38pyc)
    pycache files are nothing but interpreted form of our code. It will not interpret again and again.
    While generating output we should delete pycache files. If we do any changes to the code after running the program those changes will not get implemented while runing the code again, because pycache files are interpreted when we run the program and those will not change when we do the changes after running.

    Pythonpath: PYTHONPATH is an environment variable which you can set to add additional directories where python will look for modules and packages. Throught the program it is visible.
    (controlpanel>>system>>advanced system>>environment variables>>path(to see the folder where python located))
    (python
    python os
    import sys
    write below line in terminal window
    for i in sys.path:
        print(i)(enter)(enter))
        we will get all the paths

    Pythonstartup:PYTHONSTARTUP is an environment variable you will define specifying the location of the path to a python file.
    Pythoncaseok: it is used only in windows to instruct python to find the first case sensitive match in on import statement. set this variable to any value activated.

    PythonHome: alernative module search path. it makes environment variables to switch the module easily.
    PYTHONHOME is an alternative module/library search path. PYTHONPATH is to tell the Python interpreter where to locate the module files imported into a program. PYTHONSTARTUP is the path of an initialization file containing Python source code.

* Assigning values to variables:
    a=5
a is variable, 5 is value, = is assigning

example: a=125
Interpreter reads from right to left. reads 125 and understands that as number and makes a box of size integer and put that 125 in the box and gives name as a. This is single assignment.

id(a) - we get address/memory location of a with value 125. Memory is in hexadecimal format.
hed(id(a))

a,b,c=5,6,7 - it is tuple embacking - multiple assignment of data.

DataTypes:
    type(7)
    type(7.0)
    type("7")
    type("7+8j")
    type([7+8j])
    type(([7+8j]))
    type({([7+8j])})
    type({1})

Operators: are of 7types
    1. Arithmetic
    2. Comparision/relational
    3. assignment
    4. Logical
    5. Bitwise
    6. Membership
    7. Identity

1.Arithmetic: 
    =
    -
    *
    / (division)
    % (modulus)
    // (floor divison)
    ** (Exponential)
        / (division) will gives floating point value also called float divison.
        % (modulus) gives us remainder
        // (div) gives Quotient
        ** - to the power of

2. Comparision: We are comparing something which gives us True/False.
    1. == ->Equality Operators
    2. != -> not equals to
    3. > -> Greaterthan
    4. < -> Lessthan
    5. >= -> Greaterthan or Equalsto
    6. <= -> Lessthan or Equalsto

3. Assignment:
    1. = ->Equalsto
        +=
        -=
        *=
        /=
        %=
        //=
        **=

4. Logical:
    and
    or
    not

5. Bitwise:
    & (binary and)
    | (binary or)
    ^ (binary xor)
    ~ (one's Complement)
    << (binary leftshift)
    >> (binary rightshift)

6. Membership:
    in
    not in

7. Identity:
    is
    is not

Operator Precedence: Which operator has high Precedence
    1. ()
    2. **
    3. ~+- (unary)
    4. *,/,%,//
    5. +,- (binary)
    6. >>, <<
    7. &
    8. ^,|
    9. <=, >=, ==, !=
    10. Assignment Operators
    11. is, is not
    12. in, not in

operation:
    decision making
    looping inside

29/8/2020:

All the applications/Softwares/Code basically have 2 things:
    1. Variable-Value sets
    2. Functions
Values are primary Data Type.
Variables are Memory Location of values stored.

Operation:
    1.Making decision
    2. Looping inside

Decision Making: Python assumes any
     Non-Zero values as True
     not Null values are also True and
     If the value is 0 or Null that determines to False.

Single statement, multiple statements
a single if can work. elif and else would not work without if

if expression is True:
    do this
elif expression is True:
    do this
elif expression is True:
    do this
elif expression is True:
    do this
elif expression is True:
    do this
elif expression is True:
    do this
else: (if nothing is True)
    do this

eg:
num=float(input("Enter a value:"))
if num<35.5:
    return "Its less than 35.5"
elif num<=99.0:
    print("It is greater than 35.5 and less than 99.0")
else:
    return "Its greater than 100"

Unicode is the normal format of strings in Python, if you need to convert it into formatted you need to add an f before the string.

eg: print("{num} less than 35.5")
        O/p will be {num} less than 35.5
    print(f"{num} less than 35.5")
        O/p will be 5 less than 35.5

"f" is used convert string to a number.
"r" is raw string.

Loops:
    allows us to execute a statement or a group of statement for 
        a fixed number of times, 
        or for a fixed set of values 
        or until a particular condition is met.

    while
        or until a particular condition is met.
    
    for
        a fixed number of times-> allows us to change the contents inside the box
            for number in range(fixed_number_of_times):
                # do something
        or for a fixed set of values
            for value in set_of_values:
                # do something

type(range) - class
range: only returns integer values not float or complex.
range(start, stop, (direction)step), range only returns integer values
        0               +/-       1

+ direction increases value from from left to right.
- direction increases value from right to left.

range(5) = 0 position till 5th position -> 0 upto 4 when iterated   

range(4, 10) => 4,5,6,7,8,9 when looped
for i in range(4,10):
    print(i)

O/p: 4,5,6,7,8,9

for i in range(5):
    print(i,i*i)

O/p: 0 0
     1 1
     2 4
     3 9
     4 16
     
for i in "Kalyani":
    print(i*2)

O/p: kk
     aa
     ll
     yy
     aa
     nn
     ii

a=["1", 2,3,4,5]
for i in a:
    print(i)

O/p: 1
     2
     3
     4
     5

range(4,10,2)

O/p: 4, 6, 8

range(4,10,-1)

O/p: No output

range(10,5,-1)

O/p: 10
     9
     8
     7
     6
     
range(10,5,-2)
O/p:10
    8
    6

for loop allows us to change the contents inside the box.
eg: list=[2,3,4,5]
    for i in range(list):
        print(i*2)

    O/p: 4,6,8,10
    
eg: l=[2,3,4,6,7]
    for i in range(len(l)):
        l[i]=l[i]**2
        print(l[i])
    O/p: [4,6,16,36,49]
    Index value in output:  l[0]=4
                            l[1]=6
                            l[2]=16

eg: l=[2,3,4,6,7]
    for i in range(len(l)-1,-1,-1):
        print(i,l[i])

    O/p: 4 49
         3 36
         2 16
         1 9
         0 4

loop control statements: are of 3 types
    1.break -> terminated the loop statement and transfers execution to the statement immediately following the loop
    2.continue -> causes the loop to skip the remainder of its body and work on the next iteration
    3.pass - > do nothing

for i in range(0,256)    :
    print(i, chr(i))
O/p:
    48 to 57 - 0 to 9 (numbers)
    65 to 90 - A to Z (Capital Alphabets)
    97 to 122 - a to z (Small Alphabets)

chr(65) gives Ascii value - A
ord(A) gives numeral value - 65

     eg: num =int(input("Enter value:"))
         print("""This loop will continue till the time you enter 0 or False or Null""")
         while num:
         inp=input(">>>")
            if ord(inp) in range(48,58):
                print("f{inp} is a number")
            elif ord(inp) in range(65,91):
                print("f{inp} is caital letter")
            elif ord(inp) in range(97,123):
                print("f{inp} is small letter")
            else:
                print("f{inp} is a symbol")
        if inp is false:
            break
        elif inp<0 or inp>255:
            print("input is out of range")
            continue
        else:

def right_angled_triangle(n,pat)
    for i in range(1,n+1):
        print(pat*i)
    for i in range(n,0,-1):
        print(pat*i)
right_angled_triangle(5,"*")

If there are any changes in program we need to write these below 3 lines in cmd, so that changes will be applicable in Github repository as well.
git add .
git commit -m "your message"
git push -u origin master


31/08/2020:

Python Home: The location of Python at runtime is defined by environment variabel Python Home.
This location is different than the location we are using in current program.

import os
os.environment - gives all environment variables

for i in os.environ:
    print(i)

will get list of v

for i in os.environ.items():
    print(i, i.value)

for k, v in os.environ.items():
    print(f"{k} - {v}")

user specific environ.variables
envt variable as dictionary {key - value}

set Pythoncaseok = x

import os

Python application looks for particular files execute when python application startup.

import math
dir(math) - will get list of math operations

math.floor(15/4)
O/p: 3

15/4 gives float value, but math.floor will give integral part of the number
math.ceil(15/4)
O/p: 4 

15/4 - gives 3.75, math.ceil gives next integer i.e, 4

Anything before decimal is Ceil value and after decimal value is floor value.

math.sqrt(16)
o/p: 4

from math import sqrt - to use sqrt directly - sqrt(45)

01/09/2020

Data Types: How Python stores a data.
    The Raw materials are primarily data types. These are exisiting in each &every program which are crucial like
    1.Numbers - Int, Float, Complex
    2.Strings - Single Character, Stream of characters/Collection of characters
    3.Booleans - True/False
    4.Nonetype - None

    single character - string of len(1)
    stream of characters - 4 ways
        1. Single line - ' ', " "
        2. Multilined - """ """, ''' '''

Escape Character: spaces - \s
                  tabs - \t
                  \n - new line
                  \\ - backslash

* Data Structures are in-built in Python/Secondary Data Types.
    Structures made up of primary data type with certain properties (Data Structure is done by programmers)
    1. list
    2. Tuples
    3. Sets
    4. Dictionaries

List:   [] Lists are datatypes which are indexed and contain any type of data and are mutable (changeable)
        List are superset of array.
    
    Indexed means - all values in the list can find by place value.
    Eg: l = [1, 2.5, "Kalyani", (2,3,4), {2:3}, {2,3}]
        
        l[0] = 1
        l[1] = 2.5
        l[3] = (2,3,4)

        id(l) = will get some address

        l.append("Sriani")
        O/p: l = [1,2.5, "Kalyani", (2,3,4), {2:3}, {2,3}, "Sriani"]

        id(l) is same as above even after adding new values to existing list.

Tuples: (,) Tuples are Indexed and Immutable (not changeable)
    
    Eg: l = [1, 2.5, "Kalyani", (2,3,4), {2:3}, {2,3}, "Sriani"] 
        t = tup(l)
        O/p: t = [1, 2.5, "Kalyani", (2,3,4), {2:3}, {2,3}, "Sriani"] 

        dir(l), dir(t) - we get list of functions which we can do.

        id(t) = some address will get

        t = t - [l] - (deleting list from tuple is not possible)
        O/p: unsupported operand

        t = t - (1,) - (deleting tuples from tuple also not possible)
        O/p: not supported

        We cannot change tuple by adding/removing values.

    Eg 2: l1 = [2,3]
          t1 = (2,3)

          id(l1) = some abc address
          id(t1) = some xyz address

          l1.append(4)
          O/p: l1 = [2,3,4]

          t1.append(4)
          O/p: No attribute append in tuple

          id(l1) = same address as above

          t+l1 = (1, 2.5, "Kalyani", (2,3), {2:3}, {2,3}, "Sriani", [2,3,])

          2 items/variables are same when their memory locations are same.

          t.index(1) = 0 - gives index value of 1
          t.count(1) = 1 - count gives number of 1's in the above tuple

        def abc():
            return 3,4,5
        a = abc
        O/p: 3,4,5

        type(abc())
        <class 'tuple'>

        a,b,c = abc() - this is tuple embacking
        O/p: a
             3
             b
             4
             c
             5

Sets: {} Non-Indexed, mutable
    Eg: s = {2,3,4,5,5}
        O/p: {2,3,4,5} - Set gives unique values, removes duplicate values.

        let's add values to set
        s = {2,3,4,5}
        id(s) = some xyz address
        s.add{(6,7)}
        O/p: {2,3,4,5,(6,7)}

        l = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
        list(set(l))
        O/p: [1,2,3,4]
        
    How to get values from set without indexing?    Using Membership Operators.
    Eg: 2 in s
    O/p: True - value 2 is present in set s.
        
        {1,2} == {2,1}
        O/P: True - set will check whether value is there or not.

        (list) [1,2] == [2,1]
        O/p: False - bcoz  index value of 1 is 0 in left side input
                        index value of 1 is 1 in right side input. so both are not equal.
        
Dictionaries: It contains Key - Value pairs, Non-Indexed, Mutable.
              All the Values are linked to Keys.
              All the Keys are only Immutable data types.

    Eg: d = {1:2, 3:4, "Kalyani:Sriani", None:5, True:False, (1,):"xyz" }

        O/p: d[0] = Error - because indexing values cannot be possible in dictionaries.

            d[1] = 2 - 1 is Key in above list(1:2)
            d[None] = 5
            d[True] = False

            If we add any pair to dictionary, it will append to the last place.

    Eg: d = {1:True, 3:4, None:5, (1,):"xyz"}
        for i in d:
            print(i, d[i])

        O/p: 1 True
             3 4
             None 5
             (1,) xyz
    dir(d.keys())
    d.values
    type(d.values)
    d.keys
    type(d.keys)
    d.items - items in list of tuple
    type(d.items)

Tuples & Strings are Immutable.
String s = xyz
        s = s+1
        print(s) - to check immutable for string
    
DataTypes which are Iterable are Int, Strings, Booleans

s = "i am a string"
s.capitalize()
O/p: "I am a string"

casefold() - return the version of Python

dir(s) - list of functions

help(str) - will give the usage of functions which are in dir.

s.count(a)
O/P: 2 - two a's present in above string.

len(s)
O/p: 13 - including spaces

s.count(" ")
o/p: 3 - number of spaces

*encode - will use in compiler level.

s.endswith("s")
O/p: False - above string "I am a string" ends with letter 'g' not with 's'

s.endswith('s')
O/p: True

s.endswith(s)
O/P: True - if we write s without quotes, then it will check with complete string (i.e: "I am a string"). The statement ends with word "string" having 's'

s.endswith('string')
O/p: True

s.find(" ")
O/p: 1 - first space index value

s.find("g")
O/p: 12 - index value of 'g'

"{} is good.format("abc")
o/p: "abc" is good.

a= "abc"
f"{a} is good"
o/p: 'abc is good'

In dir(s) - isalnum to isupper functions give True/False.

s[0].islower
O/p: True

" ".isspace()
O/p: True

"abcdefs".isspace()
O/p: False
--isspace will check if the string is empty, then it gives True. if there is a space in between the string it gives false.

to find the sspace in string we have to write it as
"   abcdef"[1].isspace()
O/p; True
bcoz, starting space after quotes has 2 spaces with index values 0,1. so when we are giving 1 in [], then it is checking for index position of [1] and if there is space then it gives True. otherweise it will get False.

"  abcdef"[2].isspace()
o/p: False

s.split()
O/p: ['i', 'am', 'a', 'string'] - split converts a string into list.

s.split("a")
O/p: ['i ', 'm ', 'string']

s.split(" ",1) - number of time split has to be done.
O/p: ['i', 'am a string']

s.split(" ", 2)
O/p: ['i', 'am', 'a string']

s.split(" ", 0)
O/p: ["i am a string']

s.split()
O/p: ['i', 'am', 'a', 'string']

" ".join(s.split())
o/p:"i am a string"

"---".join(s.split())
O/p; 'i---am---a---string'

"---".join(s.split(" ",1))
O/p: i---amastring

s.rsplit()
['i', 'am', 'a', 'string']

s.lstrip()
'i am a string'

s.upper()
'I AM A STRING'

s.lower()
'i am a string'

s.title()
'I Am A String'

s = "I Am A String"
s.swapcase()
'i aM a sTRING'